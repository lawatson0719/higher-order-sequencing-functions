// Exercise 1.1:

var arr = [1, 2, 3, 4];

var forEach = function forEach(array, callback) {
    for (var i = 0; i < array.length; i++) {
    	callback(array[i]);
    }
};

var testArr = [];

forEach(arr, function (value) {
	testArr.push(value);
});

console.log(testArr);


console.assert(testArr.length === 4);
console.assert(testArr[0] === arr[0] && testArr[testArr.length - 1] === arr[arr.length - 1]);






//Exercise 1.2:

var mapArr = ['This', 'is', 'a', 'house', 'of', 'learned', 'doctors.'];

function map (array, callback) {
	var result = [];
	forEach(array, function (value) {
		result.push(callback(value));
	});
	return result;
}

function getLength (value) {
	return value.length;
}

var newArray = map(mapArr, getLength);

console.log(newArray);

for (var i = 0; i < mapArr.length; i++) {
	console.assert(newArray[i] === getLength(mapArr[i]));
}
console.assert(Array.isArray(newArray) === true);








// Exercise 1.3:

var array = [1, 2, 3, 4];

function reduce (arr, cb) {
	var previous = arr[0];
	arr = arr.slice(1, arr.length);
	forEach(arr, function (value) {
		previous = cb(previous, value);
	});
	return previous;
}

function max (a, b) {
	if (a > b) {
		return a;
	}
	return b;
}

function sum (previous, current) {
	return previous + current;
}

var total = 0;

for (var i = 0; i < array.length; i++) {
	total += array[i];
}

console.log(reduce([1, 2, 3, 4], sum));


console.assert(reduce(array, sum) === total);
console.assert(reduce(array, max) === 4);








// Exercise 1.4:


function filter (array, callback) {
	var result = [];
	for (var i = 0; i < array.length; i++) {
		let passes = callback(array[i]);
		if (passes === true) {
			result.push(array[i]);
		}
	}
	return result;
};

function isNegative (value) {
	if (value < 0) {
		return true;
	} else {
		return false;
	}
}



function isPositive (value) {
	if (value > 0) {
		return true;
	} else {
		return false;
	}
};

var arr = [-10, 50, 13, -2]

var result = filter(arr, isPositive)

console.log(result);

for (var i = 0; i < arr.length; i++) {
	if (isPositive(arr[i])) {
		console.assert(result.indexOf(arr[i]) > -1);
	} else {
		console.assert(result.indexOf(arr[i]) === -1)
	}
}

for (var i = 0; i < arr.length; i++) {
	if (isNegative(arr[i])) {
		console.assert(result.indexOf(arr[i]) === -1);
	} else {
		console.assert(result.indexOf(arr[i]) > -1)
	}
}




// Exercise 1.5


function sum () {
	arguments;
	var result = 0;
	for (var i = 0; i < arguments.length; i++) {
		if (typeof arguments[i] !== 'number'){
			return NaN;
		}
		result += arguments[i];
	}
	return result;
}

var result = sum(500, 5, 89, 1, -50);

console.log(result);

console.assert(typeof sum(null, '') === 'number');
console.assert(sum(1, 2) === 3);
console.assert(sum(10, 100, 20, 50) === 180);







//Part 2:

var products = [
    {
        name: 'Pita bread (white)',
        price: 7.5,
        category: 'food'
    },
    {
        name: 'Denim jeans',
        price: 22.95,
        category: 'apparel'
    },
    {
        name: 'Bicycle playing cards',
        price: 5,
        category: 'novelties'
    },
    {
        name: 'Red/blue plaid button-down',
        price: 23.95,
        category: 'apparel'
    },
    {
        name: 'Bic lighter',
        price: 3,
        category: 'novelties'
    },
    {
        name: 'Greek yogurt (strawberry)',
        price: 2.25,
        category: 'food'
    },
    {
        name: 'Organic eggs (dozen)',
        price: 6,
        category: 'food'
    }
];

	
// Exercise 2.1:

function avgCat (category) {
	var catItems = products.filter(function (value) {
		if (value.category === category) {
			return true;
		} else {
			return false;
		}
	});
	var prices = catItems.map(function (value) {
		return value.price;
	});
	var sum = prices.reduce(function (previous, current) {
		return previous + current
	})
	return sum / catItems.length;
}

console.log(avgCat('apparel'));





// Exercise 2.2:

// Write a function called productTemplate that takes a product as an argument and returns a string of HTML. The string should have a <li> that contains the name and price of the product.

function productTemplate (product) {
	return '<li>' + product.name + ' - ' + '$' + product.price + '</li>';
}

console.assert(productTemplate(products[1]) === '<li>Denim jeans - $22.95</li>');
console.assert(typeof productTemplate(products[0]) === 'string');

// Exercise 2.3:

// Write a function called render that takes a list of products as an argument and returns a string of HTML. The string should have a <ul> that contains a list item generated by your productTemplate function above.

function render (productList) {
	return '<ul>' + productList.map(productTemplate).join('') + '</ul>'
}

console.log(render(products));

console.assert(render(products) === '<ul><li>Pita bread (white) - $7.5</li><li>Denim jeans - $22.95</li><li>Bicycle playing cards - $5</li><li>Red/blue plaid button-down - $23.95</li><li>Bic lighter - $3</li><li>Greek yogurt (strawberry) - $2.25</li><li>Organic eggs (dozen) - $6</li></ul>');
console.assert(typeof productTemplate(products[0]) === 'string');

























